import pandas as pd
java2py_dict = {
    "public": "def",
    "this": "self",
    "static": "@staticmethod",
    "abstract": "@abstractmethod",
    "throws": "raise",
    "catch": "except",
    "throw": "raise",
    "null": "None",
    "instanceof": "isinstance",
    "short": "int",
    "long": "int",
    "double": "float",
    "boolean": "bool",
    "!=": "is not",
    "&&=": "and=",
    "||=": "or=",
    "==": "is",
    "&&": "and",
    "||": "or",
    "!": "not",
    "length": "len",
    "indexOf": "find",
    "lastIndexOf": "rfind",
    "startsWith": "string.startswith",
    "endsWith": "string.endswith",
    "toUpperCase": "string.upper",
    "toLowerCase": "string.lower",
    "trim": "string.strip",
    "replace": "string.replace",
    "Arrays.sort": "sorted",
    "Arrays.toString": "str",
    "ArrayList.add": "list.append",
    "ArrayList.get": "list",
    "ArrayList.size": "len",
    "ArrayList.remove": "list.remove",
    "ArrayList.contains": "item in list",
    "ArrayList.clear": "list.clear",
    "StringBuilder.toString": "str",
    "Math.abs": "abs",
    "Math.max": "max",
    "Math.min": "min",
    "Math.pow": "pow",
    "Math.sqrt": "sqrt",
    "Math.ceil": "ceil",
    "Math.floor": "floor",
    "Math.round": "round",
    "Math.sin": "sin",
    "Math.cos": "cos",
    "Math.tan": "tan",
    "Math.exp": "exp",
    "Math.log": "log",
    "Math.log10": "log10",
    "Math.random": "random",
    "Arrays.copyOf": "list.copy",
    "Arrays.sort": "list.sort",
    "Arrays.toString": "str",
    "Arrays.fill": "list.fill",
    "Arrays.binarySearch": "bisect.bisect_left",
    "System.out.print": "print",
    "System.out.println": "print",
    "System.out.print": "input",
    "Scanner.nextInt": "input",
    "Scanner.nextDouble": "input",
    "Scanner.nextLine": "input",
    "PrintWriter.print": "print",
    "PrintWriter.println": "print",
    "BufferedReader.readLine": "input",
    "FileReader.read": "file.read",
    "FileWriter.write": "file.write",
    "FileInputStream.read": "file.read",
    "FileOutputStream.write": "file.write",
    "BufferedWriter.write": "file.write",
    "BufferedReader.close": "file.close",
    "BufferedWriter.close": "file.close",
    "System.currentTimeMillis": "time.time",
    "SimpleDateFormat.format": "datetime.strftime",
    "Date.toString": "datetime.strftime",
    "Date.getTime": "datetime.timestamp",
    "Calendar.getInstance": "datetime.now",
    "Calendar.add": "datetime.timedelta",
    "HashMap.keySet": "dict.keys",
    "HashMap.values": "dict.values",
    "HashMap.size": "len",
    "HashMap.remove": "del dict",
    "HashMap.clear": "dict.clear",
    "HashMap.putAll": "dict.update",
    "HashMap.isEmpty": "not bool",
    "LinkedHashMap": "collections.OrderedDict",
    "HashSet.add": "set.add",
    "HashSet.contains": "element in set",
    "HashSet.remove": "set.remove",
    "HashSet.size": "len",
    "HashSet.isEmpty": "not bool",
    "HashSet.clear": "set.clear",
    "LinkedHashSet": "collections.OrderedDict",
    "Set.of": "frozenset",
    "Set.copyOf": "frozenset"
}
java2py_wokeywords_dict = {
    "!=": "is not",
    "&&=": "and=",
    "||=": "or=",
    "==": "is",
    "&&": "and",
    "||": "or",
    "!": "not",
    "length": "len",
    "indexOf": "find",
    "lastIndexOf": "rfind",
    "startsWith": "string.startswith",
    "endsWith": "string.endswith",
    "toUpperCase": "string.upper",
    "toLowerCase": "string.lower",
    "trim": "string.strip",
    "replace": "string.replace",
    "Arrays.sort": "sorted",
    "Arrays.toString": "str",
    "ArrayList.add": "list.append",
    "ArrayList.get": "list",
    "ArrayList.size": "len",
    "ArrayList.remove": "list.remove",
    "ArrayList.contains": "item in list",
    "ArrayList.clear": "list.clear",
    "StringBuilder.toString": "str",
    "Math.abs": "abs",
    "Math.max": "max",
    "Math.min": "min",
    "Math.pow": "pow",
    "Math.sqrt": "sqrt",
    "Math.ceil": "ceil",
    "Math.floor": "floor",
    "Math.round": "round",
    "Math.sin": "sin",
    "Math.cos": "cos",
    "Math.tan": "tan",
    "Math.exp": "exp",
    "Math.log": "log",
    "Math.log10": "log10",
    "Math.random": "random",
    "Arrays.copyOf": "list.copy",
    "Arrays.sort": "list.sort",
    "Arrays.toString": "str",
    "Arrays.fill": "list.fill",
    "Arrays.binarySearch": "bisect.bisect_left",
    "System.out.print": "print",
    "System.out.println": "print",
    "System.out.print": "input",
    "Scanner.nextInt": "input",
    "Scanner.nextDouble": "input",
    "Scanner.nextLine": "input",
    "PrintWriter.print": "print",
    "PrintWriter.println": "print",
    "BufferedReader.readLine": "input",
    "FileReader.read": "file.read",
    "FileWriter.write": "file.write",
    "FileInputStream.read": "file.read",
    "FileOutputStream.write": "file.write",
    "BufferedWriter.write": "file.write",
    "BufferedReader.close": "file.close",
    "BufferedWriter.close": "file.close",
    "System.currentTimeMillis": "time.time",
    "SimpleDateFormat.format": "datetime.strftime",
    "Date.toString": "datetime.strftime",
    "Date.getTime": "datetime.timestamp",
    "Calendar.getInstance": "datetime.now",
    "Calendar.add": "datetime.timedelta",
    "HashMap.keySet": "dict.keys",
    "HashMap.values": "dict.values",
    "HashMap.size": "len",
    "HashMap.remove": "del dict",
    "HashMap.clear": "dict.clear",
    "HashMap.putAll": "dict.update",
    "HashMap.isEmpty": "not bool",
    "LinkedHashMap": "collections.OrderedDict",
    "HashSet.add": "set.add",
    "HashSet.contains": "element in set",
    "HashSet.remove": "set.remove",
    "HashSet.size": "len",
    "HashSet.isEmpty": "not bool",
    "HashSet.clear": "set.clear",
    "LinkedHashSet": "collections.OrderedDict",
    "Set.of": "frozenset",
    "Set.copyOf": "frozenset"
}
java2py_wosymbol_dict = {
    "public": "def",
    "this": "self",
    "static": "@staticmethod",
    "abstract": "@abstractmethod",
    "throws": "raise",
    "catch": "except",
    "throw": "raise",
    "null": "None",
    "instanceof": "isinstance",
    "short": "int",
    "long": "int",
    "double": "float",
    "boolean": "bool",
    "length": "len",
    "indexOf": "find",
    "lastIndexOf": "rfind",
    "startsWith": "string.startswith",
    "endsWith": "string.endswith",
    "toUpperCase": "string.upper",
    "toLowerCase": "string.lower",
    "trim": "string.strip",
    "replace": "string.replace",
    "Arrays.sort": "sorted",
    "Arrays.toString": "str",
    "ArrayList.add": "list.append",
    "ArrayList.get": "list",
    "ArrayList.size": "len",
    "ArrayList.remove": "list.remove",
    "ArrayList.contains": "item in list",
    "ArrayList.clear": "list.clear",
    "StringBuilder.toString": "str",
    "Math.abs": "abs",
    "Math.max": "max",
    "Math.min": "min",
    "Math.pow": "pow",
    "Math.sqrt": "sqrt",
    "Math.ceil": "ceil",
    "Math.floor": "floor",
    "Math.round": "round",
    "Math.sin": "sin",
    "Math.cos": "cos",
    "Math.tan": "tan",
    "Math.exp": "exp",
    "Math.log": "log",
    "Math.log10": "log10",
    "Math.random": "random",
    "Arrays.copyOf": "list.copy",
    "Arrays.sort": "list.sort",
    "Arrays.toString": "str",
    "Arrays.fill": "list.fill",
    "Arrays.binarySearch": "bisect.bisect_left",
    "System.out.print": "print",
    "System.out.println": "print",
    "System.out.print": "input",
    "Scanner.nextInt": "input",
    "Scanner.nextDouble": "input",
    "Scanner.nextLine": "input",
    "PrintWriter.print": "print",
    "PrintWriter.println": "print",
    "BufferedReader.readLine": "input",
    "FileReader.read": "file.read",
    "FileWriter.write": "file.write",
    "FileInputStream.read": "file.read",
    "FileOutputStream.write": "file.write",
    "BufferedWriter.write": "file.write",
    "BufferedReader.close": "file.close",
    "BufferedWriter.close": "file.close",
    "System.currentTimeMillis": "time.time",
    "SimpleDateFormat.format": "datetime.strftime",
    "Date.toString": "datetime.strftime",
    "Date.getTime": "datetime.timestamp",
    "Calendar.getInstance": "datetime.now",
    "Calendar.add": "datetime.timedelta",
    "HashMap.keySet": "dict.keys",
    "HashMap.values": "dict.values",
    "HashMap.size": "len",
    "HashMap.remove": "del dict",
    "HashMap.clear": "dict.clear",
    "HashMap.putAll": "dict.update",
    "HashMap.isEmpty": "not bool",
    "LinkedHashMap": "collections.OrderedDict",
    "HashSet.add": "set.add",
    "HashSet.contains": "element in set",
    "HashSet.remove": "set.remove",
    "HashSet.size": "len",
    "HashSet.isEmpty": "not bool",
    "HashSet.clear": "set.clear",
    "LinkedHashSet": "collections.OrderedDict",
    "Set.of": "frozenset",
    "Set.copyOf": "frozenset"
}
java2py_woapi_dict = {
    "public": "def",
    "this": "self",
    "static": "@staticmethod",
    "abstract": "@abstractmethod",
    "throws": "raise",
    "catch": "except",
    "throw": "raise",
    "null": "None",
    "instanceof": "isinstance",
    "short": "int",
    "long": "int",
    "double": "float",
    "boolean": "bool",
     "!=": "is not",
    "&&=": "and=",
    "||=": "or=",
    "==": "is",
    "&&": "and",
    "||": "or",
    "!": "not",
}
py2java_dict = {v: k for k, v in java2py_wokeywords_dict.items()}
def gen_aug_dataset(path='./dataset/train.jsonl',dataset_type='train'):
    df=pd.read_json(path)
    # 将code_content列拆分为多个单词
    df['code1_aug'] = df['code1'].str.split()
    df['code2_aug'] = df['code2'].str.split()
    # 使用map方法替换字典中的键为对应的值
    def get_word_or_self(word,lang):
        if lang=='java':
            for key, value in java2py_dict.items():
                if key in word:
                    start = word.index(key)
                    end = start + len(key)
                    word= word[:start] + value + word[end:]
                    break
        elif lang=='python':
            for key, value in py2java_dict.items():
                if key in word:
                    start = word.index(key)
                    end = start + len(key)
                    word= word[:start] + value + word[end:]
                    break
        return word
    df['code1_aug'] = df.apply(lambda row:get_word_or_self(row['code1'],row['lang1']),axis=1)
    df['code2_aug'] = df.apply(lambda row:get_word_or_self(row['code2'],row['lang2']),axis=1)
    desired_columns = ['label', 'index1', 'index2','lang1','lang2','code1','code2']
    df1 = df[desired_columns]

    desired_columns = ['label', 'index1', 'index2','lang1','lang2','code1','code2_aug']
    df2 = df[desired_columns]
    df2 = df2.rename(columns={'code2_aug': 'code2'})

    desired_columns = ['label', 'index1', 'index2','lang1','lang2','code1_aug','code2']
    df3 = df[desired_columns]
    df3 = df3.rename(columns={'code1_aug': 'code1'})
    merged_df = pd.concat([df1, df2], ignore_index=True)
    merged_df = pd.concat([merged_df, df3], ignore_index=True)
    merged_df.to_json(path_or_buf='./dataset/'+dataset_type+'_aug.jsonl',orient='records')

gen_aug_dataset('./dataset/train.jsonl','train')